name: 'API-$(majorVersion).$(minorVersion).$(patchVersion).$(rev:r)'

trigger:
- release/*
- R_*
- hotfix/*
- feature/*
- main
- S_*

pool:
  vmImage: 'windows-latest'

variables:
  majorVersion: 0
  minorVersion: 0
  patchVersion: 1
  buildConfiguration: 'Release'
  projectName: 'AzureDemoProj'
  publishArtifact: 'True'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $publishArtifact = $env:PUBLISHARTIFACT
      if ($env:BUILD_SOURCEBRANCHNAME -like "main" -Or $env:BUILD_SOURCEBRANCHNAME -like "R_*") {
        $publishArtifact = "True"
      } else {
        $publishArtifact = "False"
      }
      Write-Host "##vso[task.setvariable variable=publishArtifact;]$publishArtifact"

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '*/.sln'
    feedsToUse: 'config'
    nugetConfigPath: 'nuget.config'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '*/.csproj'
    arguments: --configuration $(buildConfiguration)

- task: DotNetCoreCLI@2
  displayName: 'Publish Package'
  condition: and(succeeded(), eq(variables['publishArtifact'], 'True'))
  inputs:
    command: 'publish'
    projects: '*/$(projectName)/.csproj'
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    publishWebProjects: false
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  condition: and(succeeded(), eq(variables['publishArtifact'], 'True'))